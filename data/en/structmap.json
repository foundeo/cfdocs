{
	"syntax":"structMap(struct, function(key, value [,struct]){} [, parallel] [, maxThreads])",
	"member":"someStruct.map(function(key, value [,struct]){} [, parallel] [, maxThreads])",
	"description":"Iterates over every entry of the Struct and calls the closure function to work on the key value pair of the struct. The returned value will be set for the same key in a new struct and the new struct will be returned.",
	"type":"function",
	"related":["structEach","structSome","structReduce","structFilter"],
	"returns":"struct",
	"engines":{
		"coldfusion":{"minimum_version":"11","docs":"https://helpx.adobe.com/coldfusion/cfml-reference/coldfusion-functions/functions-s/structmap.html","notes":""},
		"lucee":{"minimum_version":"4.5", "docs":"https://docs.lucee.org/reference/functions/structmap.html","notes":""}
    	},
	"name":"structMap",
	"links":[{
		"title":"Map, Reduce and other Higher Order Functions",
		"description":"A Primer for map, reduce, filter, and Higher Order Functions in general.",
		"url":"http://ryanguill.com/functional/higher-order-functions/2016/05/18/higher-order-functions.html"
	},
	{
		"title": "ColdFusion 11: .map() and .reduce()",
		"description": "A look at the new .map() and .reduce() methods that each of array, struct and lists all have",
		"url":"http://blog.adamcameron.me/2014/02/coldfusion-11-map-and-reduce.html"
	}],
	"params":[
		{"values":[],"default":"","description":"The input struct.","name":"struct","type":"struct","required":"1"},
		{"name":"function","description":"Closure or a function reference that will be called for each of the iteration.",
			"callback_params": [
			{
				"values": [],
				"default": "",
				"description": "The key for the current iteration",
				"name": "key",
				"type": "string",
				"required": false
			},{
				"values": [],
				"default": "",
				"description": "The value for the current iteration",
				"name": "value",
				"type": "any",
				"required": false
			},{
				"values": [],
				"default": "",
				"description": "A reference of the original struct",
				"name": "struct",
				"type": "struct",
				"required": false
			}],"type":"any","required":"true","values":[],"default":""},
		{"name":"parallel","description":"Lucee4.5+ true if the items can be executed in parallel","required":false,"default":"false","type":"boolean","values":[true, false]},
		{"name":"maxThreads","description":"Lucee4.5+ the maximum number of threads to use when parallel = true","required":false,"default":"20","type":"numeric","values":[]}
	],
	"examples":[
		{
			"title": "Script Syntax",
			"description": "",
			"code": "original = {\r\n    \"one\": {\r\n        1: \"tahi\"\r\n    },\r\n    \"two\": {\r\n        2: \"rua\"\r\n    },\r\n    \"three\": {\r\n        3: \"toru\"\r\n    },\r\n    \"four\": { \r\n        4: \"wha\"\r\n    }\r\n};\r\nfunction mapOriginal(k,v) {\r\n    return v[ListFirst(v.keyList())];\r\n}\r\nfixed = structMap(original,mapOriginal);\r\nwriteDump([original, fixed]);",
			"runnable": false
		},
		{
			"title": "Using Member Function",
			"description": "CF11+ Lucee4.5+ ",
			"code": "original = {\r\n    \"one\": {\r\n        1: \"tahi\"\r\n    },\r\n    \"two\": {\r\n        2: \"rua\"\r\n    },\r\n    \"three\": {\r\n        3: \"toru\"\r\n    },\r\n    \"four\": {\r\n        4: \"wha\"\r\n    }\r\n};\r\nfixed = original.map(function(k,v) {\r\n    return v[ListFirst(v.keyList())];\r\n});\r\nwriteDump([original, fixed]);",
			"runnable": false
		}
	]
}
