{
	"name":"cfloop",
	"type":"tag",
	"syntax":"<cfloop>",
	"script": "for (i = 1; i <= 10; i++) { }",
	"related":["arrayEach","structEach", "listEach"],
	"description":"Different items are required based on loop type. Items listed\n as required may not be depending on your loop type.\n Loop forms:\n [query] [condition] [index + from + to ] [index + list]\n [collection + item ]",
	"params": [
		{"name":"index","description":"Index value. CFML sets it to from value and\n increments or decrements by step value, until it equals to\n value.","required":false,"default":"","type":"string","values":[]},
		{"name":"to","description":"Beginning value of index.","required":false,"default":"","type":"numeric","values":[]},
		{"name":"from","description":"Ending value of index.","required":false,"default":"","type":"numeric","values":[]},
		{"name":"step","description":"Ending value of index.","required":false,"default":"","type":"numeric","values":[]},
		{"name":"condition","description":"Condition that controls the loop.","required":false,"default":"","type":"string","values":[]},
		{"name":"query","description":"Query that controls the loop.","required":false,"default":"","type":"query","values":[]},
		{"name":"group","description":"CF10+ and Lucee4.5+. Query column to use to group sets of records. Eliminates adjacent duplicate rows when data is sorted. Use if you retrieved a recordset ordered on one or more query columns.","required":false,"default":"","type":"string","values":[]},
		{"name":"groupcasesensitive","description":"Lucee4.5+. Boolean indicating whether to group with regard to case or not. The default value is NO; case is considered while grouping. If the query attribute specifies a query object that was generated by a case-insensitive SQL query, set the groupCaseSensitive attribute to NO to keep the recordset intact.","required":false,"default":"No","type":"boolean","values":[]},
		{"name":"startrow","description":"First row of query that is included in the loop.","required":false,"default":"","type":"numeric","values":[]},
		{"name":"endrow","description":"Last row of query that is included in the loop.","required":false,"default":"","type":"numeric","values":[]},
		{"name":"list","description":"The list attribute is used with the `index` (or `item` in Lucee or CF2016+) attribute to loop over a list, variable, or filename; contains a list","required":false,"default":"","type":"string","values":[]},
		{"name":"delimiters","description":"Character(s) that separates items in list","required":false,"default":",","type":"string","values":[]},
		{"name":"collection","description":"The collection attribute is used with the item attribute.\n often to loop over a structure","required":false,"default":"","type":"any","values":[]},
		{"name":"item","description":"The item attribute is used with the collection attribute.\n often to loop over a structure\n\nNOTE: If you have item attribute without index, item represents the key. In Lucee4.5+ you can use item with index, but keep in mind, that item will represent the value whereas index will be the key now!","required":false,"default":"","type":"string","values":[]},
		{"name":"array","description":"CF8+ An array.","required":false,"default":"","type":"AnyValue","values":[]},
		{"name":"characters","description":"CF8+ The number of characters to read during each iteration of the loop from the file specified in the file attribute. \nIf the value of the characters attribute is more than the number of characters in the file, \nColdFusion uses the number of characters in the file.","required":false,"default":"","type":"numeric","values":[]},
		{"name":"file","description":"CF8+ The absolute path and filename of the text file to read, one line at a time. \nThis is helpful when reading large text files, because you can reuse the value of the index variable, \nwhich contains the current line of the file. \nWhen the loop completes, ColdFusion closes the file.","required":false,"default":"","type":"string","values":[]},
		{"name":"times","description":"Lucee5+ If you want to have a specific iterations you can simply use `times` param instead of `from` and `to`","required":false,"default":"","type":"numeric","values":[]}
	],
	"engines": {
		"coldfusion": {"minimum_version":"2", "notes":"", "docs":"https://helpx.adobe.com/coldfusion/cfml-reference/coldfusion-tags/tags-j-l/cfloop.html"},
		"lucee": {"minimum_version":"", "notes":"", "docs":"https://docs.lucee.org/reference/tags/loop.html"},
		"railo": {"minimum_version":"", "notes":"", "docs":"http://railodocs.org/index.cfm/tag/cfloop"},
		"openbd": {"minimum_version":"", "notes":"", "docs":"http://openbd.org/manual/?/tag/cfloop"}
	},
	"links": [

	],
	"examples": [
		{
			"title": "For Loop (Script Syntax)",
			"description": "General Purpose Loop",
			"code": "for (i = 1; i <= 10; i++) {\r\n    writeOutput(i); \r\n}",
			"result": "12345678910"
		},
		{
			"title": "For Loop using CFLoop Tag",
			"description": "General Purpose Loop",
			"code": "<cfloop index=\"i\" from=\"1\" to=\"10\">\r\n    <cfoutput>#i#</cfoutput>\r\n</cfloop>",
			"result": "1 2 3 4 5 6 7 8 9 10"
		},
		{
			"title": "Loop Over an Array (Script Syntax)",
			"description": "Array Loop",
			"code": "myArray = [\"a\", \"b\", \"c\"];\n// For Loop By index for CF9.0.0 and lower \nfor (i = 1; i <= arrayLen(myArray); i++) {\n    writeOutput(myArray[i]);\n}\n// By For In CF9.0.1+ \nfor (currentIndex in myArray) {\n    writeOutput(currentIndex);\n}\n// By arrayEach() member function CF11+\nmyArray.each(function(element, index) {\n    writeOutput(element & \" : \" & index);\n});",
			"result": ""
		},
		{
			"title": "CFLoop over an Array",
			"description": "Array Loop",
			"code": "<cfset myArray = [\"a\", \"b\", \"c\"]> \r\n <!--- By index ---> \r\n <cfloop index=\"i\" from=\"1\" to=\"#arrayLen(myArray)#\"> \r\n <cfoutput>#myArray[i]#</cfoutput> \r\n </cfloop> \r\n <!--- By array ---> \r\n <cfloop index=\"currentIndex\" array=\"#myArray#\"> \r\n <cfoutput>#currentIndex#</cfoutput> \r\n </cfloop>",
			"result": ""
		},
	    	{
			"title": "Loop over a Struct (Script Syntax)",
			"description": "Struct Loop",
			"code": "myStruct = {name: \"Tony\", state: \"Florida\"}; \r\n // By struct \r\n for (currentKey in myStruct) { \r\n writeOutput(\"<li>#currentKey# : #myStruct[currentKey]#</li>\"); \r\n } \r\n // By structEach() \r\n myStruct.each(function(key, value) { \r\n writeOutput(\"<li>#key# : #value#</li>\"); \r\n }); \r\n ",
			"result": ""
		},
		{
			"title": "CFLoop over a Struct",
			"description": "Loop over a Struct using the collection and item arguments of cfloop.",
			"code": "<!--- Define our struct ---> \r\n <cfset myStruct = {name: \"Tony\", state: \"Florida\"}> \r\n <!--- By struct ---> \r\n <cfloop item=\"currentKey\" collection=\"#myStruct#\"> \r\n <cfoutput><li>#currentKey# : #myStruct[currentKey]#</li></cfoutput> \r\n </cfloop>",
			"result": ""
		},
		{
			"title": "CFLoop over a Struct",
			"description": "Lucee4.5+ Loop over a Struct using the collection, index and item arguments of cfloop.",
			"code": "<!--- Define our struct --->\n<cfset myStruct = {name: \"Tony\", state: \"Florida\"}>\n<!--- By struct --->\n<cfloop item=\"currentItem\" collection=\"#myStruct#\" index=\"currentKey\">\n\r<cfoutput><li>#currentKey# : #currentItem#</li></cfoutput>\n</cfloop>",
			"result": ""
		},
	    	{
			"title": "Loop over a List (Script Syntax)",
			"description": "List Loop",
			"code": "// Define our list \r\n myList = \"a, b, c\"; \r\n // By array \r\n for (item in listToArray(myList, \",\")) { \r\n writeOutput(item); \r\n } \r\n // By listEach() \r\n myList.each(function(element, index) { \r\n writeOutput(element & \" : \" & index); \r\n }, \",\");",
			"result": ""
		},
		{
			"title": "CFLoop over a List",
			"description": "List Loop",
			"code": "<!--- Define our list ---> \r\n <cfset myList = \"a, b, c\"> \r\n <!--- By list ---> \r\n <cfloop index=\"item\" list=\"#myList#\"> \r\n <cfoutput>#item#</cfoutput> \r\n </cfloop> \r\n <!--- By array ---> \r\n <cfloop index=\"currentIndex\" array=\"#listToArray(myList, \",\")#\"> \r\n <cfoutput>#currentIndex#</cfoutput> \r\n </cfloop>",
			"result": ""
		},
	   	{
			"title": "Loop over a Query (Script Syntax)",
			"description": "Query Loop",
			"code": "// Define our query \r\n platform = [\"Adobe ColdFusion\", \"Railo\", \"Lucee\"]; \r\n myQuery = queryNew(\" \"); \r\n queryAddColumn(myQuery, \"platform\", \"CF_SQL_VARCHAR\", platform); \r\n // By row index \r\n for (i = 1; i <= myQuery.recordCount; i++) { \r\n writeOutput(\"<li>#myQuery[\"platform\"][i]#</li>\"); \r\n } \r\n // By query \r\n for (row in myQuery) { \r\n writeOutput(\"<li>#row.platform#</li>\"); \r\n }",
			"result": ""
		},
		{
			"title": "Loop over a Query with Grouping (Script Syntax)",
			"description": "Query Loop use grouping",
			"code": "q = queryNew(\"pk,fk,data\", \"integer,integer,varchar\",[ \r\n [1, 10, \"aa\"], \r\n [2, 20, \"bb\"], \r\n [3, 20, \"cc\"], \r\n [4, 30, \"dd\"], \r\n [5, 30, \"ee\"], \r\n [6, 30, \"ff\"] \r\n]); \r\ncfloop(query=q, group=\"fk\"){ \r\n    writeOutput(\"<strong>#fk#</strong><br />\"); \r\n    cfloop(){ \r\n        writeOutput(\"&emsp;#pk#:#data#<br />\"); \r\n    } \r\n    writeOutput(\"<hr>\"); \r\n}",
			"result": ""
		},
		{
			"title": "CFLoop over a Query",
			"description": "Query Loop",
			"code": "<!--- Define our query ---> \r\n <cfset platform = [\"Adobe ColdFusion\", \"Railo\", \"Lucee\"]> \r\n <cfset myQuery = queryNew(\" \")> \r\n <cfset queryAddColumn(myQuery, \"platform\", \"CF_SQL_VARCHAR\", platform)> \r\n <!--- By row index ---> \r\n <cfloop index=\"i\" from=\"1\" to=\"#myQuery.recordCount#\"> \r\n <cfoutput><li>#myQuery[\"platform\"][i]#</li></cfoutput> \r\n </cfloop> \r\n <!--- By group ---> \r\n <cfloop query=\"myQuery\" group=\"platform\"> \r\n <cfoutput><li>#platform#</li></cfoutput> \r\n </cfloop>",
			"result": ""
		},
		{
			"title": "While Loop (Script Syntax)",
			"description": "Pre-Condition Loop This form of loop evaluates a single condition at the beginning of each iteration, and continues to loop whilst the condition is true",
			"code": "while (condition) { \r\n  // statements \r\n}",
			"result": ""
		},
		{
			"title": "Do While Loop (Script Syntax)",
			"description": "Post-Condition Loop This form of loop evaluates a single condition at the beginning of each iteration, and continues to loop whilst the condition is true",
			"code": "do { \r\n // statements \r\n} while(condition);",
			"result": ""
		},
		{
			"title": "Loop over a File (Script Syntax)",
			"description": "File Loop 16 characters at a time.",
			"code": "filePath = getCurrentTemplatePath(); \r\n cfloop(file=filePath, index=\"chars\", characters=16, charset=\"UTF-8\"){ \r\n writeOutput(chars); // outputs the contents of this file \r\n }",
			"result": "",
			"runnable":false
		},
		{
			"title": "Date Time Loop (Script Syntax)",
			"description": "Date-Time range Loop (work around)",
			"code": "from = now(); \r\n to   = dateAdd(\"d\", 7, from); \r\n for(date=from; dateCompare(date, to, \"d\") <= 0; date = dateAdd(\"d\", 1, date)){ \r\n writeOutput(dateTimeFormat(date, \"yyyy-mm-dd HH:nn:sstt\") & \"<br>\"); \r\n }",
			"result": ""
		}
	]
}
