{
    "engines": {"lucee": {
        "docs": "https://docs.lucee.org/reference/functions/queryparam.html",
        "notes": "Prior to Lucee 6, an empty value would be auto cast to null, since Lucee 6 only strings are handled this way [LDEV-4410](https://luceeserver.atlassian.net/browse/LDEV-4410)\n\nIn Lucee 6, this is no longer the default behavior and throws an exception, which matches ACF.\n\nYou can re-enable the old behavior by setting this environment variable or system property to `true`.\n\n**Environment Variable:** `LUCEE_QUERY_ALLOWEMPTYASNULL=TRUE`  \n**System Property:** `-Dlucee.query.allowemptyasnull=\"true\"`\n"
    }},
    "name": "queryparam",
    "description": "Checks the data type of a query parameter.",
    "syntax": "<queryparam/>",
    "returns": "void",
    "type": "tag",
    "params": [
        {
            "name": "value",
            "description": "Specifies the actual value that Lucee passes to the database.\n \t\n- For standard parameters: The single value used in the query\n- For list parameters: Can be an array, list string, or other collection type\n- For null values: Set the `null` attribute to true and this attribute is ignored\n \t\n \tThe value will be automatically escaped to prevent SQL injection.\n",
            "default": false,
            "type": "any",
            "required": false
        },
        {
            "name": "sqltype",
            "description": "The SQL data type that the parameter will be bound to.\n\t\nCommon types include:\n\n- `varchar`: For strings (default)\n- `integer`, `bigint`, `smallint`, `tinyint`: For various sized integers\n- `double`, `decimal`, `money`: For floating point/decimal values\n- `bit`, `boolean`: For boolean values\n- `date`, `time`, `timestamp`: For date/time values\n- `binary`, `blob`: For binary data\n\nA list of SQL types can be found on the [SQL Type page](/guides/cookbooks/Sql-Types.html). All can be used with or without the `CF_SQL_` prefix.\n\tUsing the correct type improves security, enables proper type checking, and optimizes query execution. \n",
            "default": false,
            "type": "string",
            "required": false
        },
        {
            "name": "cfsqltype",
            "description": "This attribute has been deprecated, use the `sqlType` attribute instead which provides identical functionality.\n \t\n \tMaintained for backward compatibility with older code that used the CFML-specific naming convention.\n",
            "default": false,
            "type": "string",
            "required": false
        },
        {
            "name": "maxlength",
            "description": "Maximum allowed length of the parameter value (validation check).\n \t\n- For string values: The maximum number of characters allowed\n- For binary values: The maximum number of bytes allowed\n- If the value exceeds this length, Lucee will throw an exception\n- If not specified, defaults to the actual length of the provided value\n- If the attribute `charset` is defined, string length comparison will be byte-based for that encoding",
            "default": false,
            "type": "number",
            "required": false
        },
        {
            "name": "charset",
            "description": "Specifies the character encoding for string validation.\n \t\nThis attribute serves two purposes:\n\n1. It validates that the given value is compatible with the specified charset\n2. It determines how byte length is calculated for `maxLength` validation\n \t\nCommon values include `UTF-8`, `ISO-8859-1`, or other valid Java charset names.This attribute is used for 2 things:\n\n- it checks if the given value is compatible with that charset\n- to check the binary length of the value (see attribute maxlength).",
            "minimum_version": "str",
            "default": false,
            "type": "string",
            "required": false
        },
        {
            "name": "scale",
            "description": "Number of decimal places to allow for numeric parameters.\n \t\n- Only applies to decimal data types (decimal, numeric, money, etc.)\n- Values with more decimal places than specified will be rounded\n- Particularly important for financial calculations to control precision\n- Default value is zero if not specified",
            "default": false,
            "type": "number",
            "required": false
        },
        {
            "name": "null",
            "description": "Indicates whether the parameter should be treated as NULL.\n \t\n- `true`: The parameter is passed as NULL to the database (ignores the `value` attribute)\n- `false`: The parameter uses the value provided in the `value` attribute\n- Default is `false`\n \t\nSQL comparison with NULL requires special syntax in most databases (using `IS NULL` rather than `= NULL`).",
            "default": false,
            "type": "boolean",
            "required": false
        },
        {
            "name": "list",
            "description": "Controls how the parameter value is handled:\n \t\n- `true`: The parameter value is treated as a list of values (typically used with SQL's `IN` operator)\n- `false`: The parameter is handled as a simple value\n- Not set: Lucee automatically detects if the value is an array and treats it as a list if it is (but not for byte arrays)\n \t\nWhen working with lists/arrays:\n\n- **Empty Arrays**: When an empty array is provided with `list=true` (or auto-detected as a list), Lucee will handle this correctly by effectively omitting the parameter from the query\n- **Usage with IN**: Typically used with SQL's `IN` operator\n- **Array Elements**: Each element in the array will be properly typed according to the specified `sqlType`",
            "default": false,
            "type": "boolean",
            "required": false
        },
        {
            "name": "separator",
            "description": "Specifies the character that separates values in string lists.\n \t\n- Only used when `list=\"true\"` and the value is a string (not an array)\n- Default separator is a comma (`,`)\n- Common alternatives include semicolon (`;`), pipe (`|`), or tab\n- Example: For a string like \"red;green;blue\" with `list=\"true\" separator=\";\"`, the values would be treated as three separate items\n \t\nNote: For best results with complex separators or values that might contain the separator character, consider using an array instead of a delimited string.",
            "default": false,
            "type": "string",
            "required": false
        }
    ]
}