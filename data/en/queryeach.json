{
	"name": "queryEach",
	"type": "function",
	"syntax": "queryEach(query, function(row [, currentRow] [, query] ){} [, parallel] [, maxThreads])",
	"member": "query.each(function(row [, currentRow] [, query] ){} [, parallel] [, maxThreads])",
	"returns": "void",
	"related": [],
	"description": "Iterates over query rows and passes each row per iteration to a callback function",
	"params": [
		{"name": "query", "description": "query to loop over", "required": true, "default": "", "type": "query", "values": []},
		{"name":"callback","description":"Closure or a function reference that will be called for each of the iteration.",
			"callback_params": [
			{
				"values": [],
				"default": "",
				"description": "A struct with all of the columns for the current iteration",
				"name": "row",
				"type": "struct",
				"required": false
			},{
				"values": [],
				"default": "",
				"description": "The value for the current iteration",
				"name": "currentRow",
				"type": "numeric",
				"required": false
			},{
				"values": [],
				"default": "",
				"description": "A reference of the original struct",
				"name": "query",
				"type": "query",
				"required": false
			}],"type":"any","required":"true","values":[],"default":""},
		{"name": "parallel", "description": "Lucee4.5+ Executes closures parallel", "required": false, "default": "", "type": "boolean", "values": []},
		{"name": "maxThreads", "description": "Lucee4.5+ Maximum number of threads executed\nIf `parallel` argument is set to false it will be ignored", "required": false, "default": "20", "type": "numeric", "values": []}
	],
	"engines": {
		"lucee": {"minimum_version": "", "notes": "When called as a member function query.each() is chainable.", "docs": "https://docs.lucee.org/reference/functions/queryeach.html"},
		"coldfusion": {"minimum_version": "2016", "notes": "", "docs": "https://helpx.adobe.com/coldfusion/cfml-reference/coldfusion-functions/functions-m-r/queryeach.html"}
	},
	"examples": [{
		"title":"Iterate over query rows instead of cfloop()",
		"description":"",
		"code":"<cfscript>\r\n    news = queryNew(\"id,title\",\r\n    \t\"integer,varchar\", [{\r\n    \t\t\"id\": 1,\r\n    \t\t\"title\": \"Dewey defeats Truman\"\r\n    \t}, {\r\n    \t\t\"id\": 2,\r\n    \t\t\"title\": \"Man walks on Moon\"\r\n    \t}]\r\n    );\r\n    \r\n    function newsRow(row) {\r\n        writeOutput('<tr>');\r\n            writeOutput('<td>#row.id#</td>')\r\n            writeOutput('<td>#row.title#</td>');\r\n        writeOutput('<tr>');\r\n    }\r\n</cfscript>\r\n<cfoutput>\r\n    <table>\r\n        #queryEach(news,newsRow)#\r\n    </table>\r\n</cfoutput>",
		"result":"1&emsp;Dewey defeats Truman\n2&emsp;Man walks on Moon",
		"runnable":false
	}],
	"links":[{
		"title":"Map, Reduce and other Higher Order Functions",
		"description":"A Primer for map, reduce, filter, and Higher Order Functions in general.",
		"url":"http://ryanguill.com/functional/higher-order-functions/2016/05/18/higher-order-functions.html"
	},
	{
		"title": "ColdFusion 2016: query iteration functions",
		"description": "A look at the higher-order functions that queries have",
		"url":"http://blog.adamcameron.me/2016/02/coldfusion-2016-query-iteration.html"
	}]
}
