{
	"name":"decrypt",
	"type":"function",
	"syntax":"decrypt(string, key [, algorithm [, encoding] [, iv | salt [, iterations]]])",
	"returns":"string",
	"related":["encrypt","cfusion_Decrypt"],
	"description":" Decrypts a string that is encrypted with the Encrypt function.",
	"params": [
		{"name":"string","description":"Encrypted string to decrypt.","required":true,"default":"","type":"string","values":[]},
		{"name":"key","description":"Key or seed used to encrypt the string.\n* For the `CFMX_COMPAT` algorithm, any combination of any number of characters; used as a seed used to generate a 32-bit encryption key.\n* For all other algorithms, a key in the format used by the algorithm. For these algorithms, use the `GenerateSecretKey` function to generate the key.","required":true,"default":"","type":"string","values":[]},
		{"name":"algorithm","description":"The algorithm to use to decrypt the string. Must be the same as the algorithm used to encrypt the string. See the `encrypt` function for additional algorithms.\nColdFusion Standard Edition installs the following algorithms:\n* CFMX_COMPAT: the algorithm used in ColdFusion MX and prior releases. This algorithm is the least secure option (default).\n* AES: the Advanced Encryption Standard specified by the National Institute of Standards and Technology (NIST) FIPS-197.\n* BLOWFISH: the Blowfish algorithm defined by Bruce Schneier.\n* DES: the Data Encryption Standard algorithm defined by NIST FIPS-46-3.\n* DESEDE: the \"Triple DES\" algorithm defined by NIST FIPS-46-3.\n\nNOTE: ColdFusion Enterprise Edition installs RSA BSafe Crypto-J library, which provides FIPS-140 Compliant Strong Cryptography.\nNOTE: If you install additional cryptography algorithms, you can also specify any of its encryption and decryption algorithms.","required":false,"default":"CFMX_COMPAT","type":"string","values":["CFMX_COMPAT","AES","BLOWFISH","DES","DESEDE"]},
		{"name":"encoding","description":"The binary encoding used to represent the data as a string. Must be the same as the algorithm used to encrypt the string.\n* Base64: the Base64 algorithm, as specified by IETF RFC 2045.\n* Hex: the characters A-F and 0-9 represent the hexadecimal byte values.\n* UU: the UNIX standard UUEncode algorithm (default).\n\nNOTE: If you specify this parameter, you must also specify the `algorithm` parameter.","required":false,"default":"UU","type":"string","values":["UU","Base64","Hex"]},
		{"name":"iv","description":"THIS PARAMETER IS MUTUALLY EXCLUSIVE WITH `SALT`.\n\nSpecify this parameter to adjust ColdFusion encryption to match the details of other encryption software.\n* For Block Encryption Algorithms: This is the binary Initialization Vector value to use with the algorithm. The algorithm must contain a Feedback Mode other than ECB. This must be a binary value that is exactly the same size as the algorithm block size.\nNOTE: If you specify this parameter, you must also specify the `algorithm` parameter.","required":false,"default":"","type":"binary","values":[]},
		{"name":"salt","description":"THIS PARAMETER IS MUTUALLY EXCLUSIVE WITH `IV`.\n\nSpecify this parameter to adjust ColdFusion encryption to match the details of other encryption software.\n* For Password Based Encryption Algorithms: This is the binary Salt value to transform the password into a key.\nNOTE: If you specify this parameter, you must also specify the `algorithm` parameter.","required":false,"default":"","type":"binary","values":[]},
		{"name":"iterations","description":"The number of iterations to transform the password into a binary key. Specify this parameter to adjust ColdFusion encryption to match the details of other encryption software.\n\nNOTE: If you specify this parameter, you must also specify the `algorithm` parameter with a Password Based Encryption (PBE) algorithm.\nNOTE: This parameter is used with the `salt` parameter. Do not specify this parameter for Block Encryption Algorithms.\nNOTE: You must use the same value to encrypt and decrypt the data.","required":false,"default":"0","type":"numeric","values":[]}
	],
	"engines": {
		"coldfusion": {"minimum_version":"4", "notes":"CF2018+ uses separate `iv` or `salt` named parameters.", "docs":"https://helpx.adobe.com/coldfusion/cfml-reference/coldfusion-functions/functions-c-d/Decrypt.html"},
		"lucee": {"minimum_version":"", "notes":"Uses `IVorSalt` parameter or aliases of `iv` and `salt`.", "docs":"https://docs.lucee.org/reference/functions/decrypt.html"},
		"railo": {"minimum_version":"", "notes":"", "docs":"http://railodocs.org/index.cfm/function/decrypt"},
		"openbd": {"minimum_version":"", "notes":"", "docs":"http://openbd.org/manual/?/function/decrypt"}
	},
	"links": [

	],
	"examples": [
		{
			"title":"Encrypt and Decrypt a Secret",
			"description":"Generate an AES 128 bit key and then use it to encrypt and decrypt a secret.",
			"code":"ex={};\nex.key = generateSecretKey(\"AES\");\nex.secret = \"top secret\";\nex.encrypted=encrypt(ex.secret, ex.key, \"AES\", \"Base64\");\nex.decrypted=decrypt(ex.encrypted, ex.key, \"AES\", \"Base64\");\nwriteDump(ex);",
			"result":""
		}
	]

}
