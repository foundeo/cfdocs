{
	"name":"decrypt",
	"type":"function",
	"syntax":"decrypt(encrypted_string, key [, algorithm] [, encoding] [, ivorsalt] [, iterations])",
	"returns":"string",
	"related":["encrypt","cfusion_Decrypt"],
	"description":" Decrypts a string that is encrypted with the Encrypt function.",
	"params": [
		{"name":"encrypted_string","description":"String to decrypt.","required":true,"default":"","type":"string","values":[]},
		{"name":"key","description":"Key or seed used to encrypt the string.\n * For the CFMX_COMPAT algorithm, any combination of any\n number of characters; used as a seed used to generate\n a 32-bit encryption key.\n * For all other algorithms, a key in the format used by the\n algorithm. For these algorithms, use the GenerateSecretKey\n function to generate the key.","required":true,"default":"","type":"string","values":[]},
		{"name":"algorithm","description":"The algorithm to use to decrypt the string. Must be the same\n as the algorithm used to encrypt the string.\n * CFMX_COMPAT: the algorithm used in ColdFusion MX and prior\n releases. This algorithm is the least secure option (default).\n * AES: the Advanced Encryption Standard specified by the\n National Institute of Standards and Technology (NIST) FIPS-197.\n * BLOWFISH: the Blowfish algorithm defined by Bruce Schneier.\n * DES: the Data Encryption Standard algorithm defined by NIST FIPS-46-3.\n * DESEDE: the \"Triple DES\" algorithm defined by NIST FIPS-46-3.","required":false,"default":"CFMX_COMPAT","type":"string","values":["CFMX_COMPAT","AES","BLOWFISH","DES","DESEDE"]},
		{"name":"encoding","description":"The binary encoding used to represent the data as a string.\n Must be the same as the algorithm used to encrypt the string.\n * Base64: the Base64 algorithm, as specified by IETF RFC 2045.\n * Hex: the characters A-F and 0-9 represent the hexadecimal byte values.\n * UU: the UNIX standard UUEncode algorithm (default).\n If you specify this parameter, you must also specify the algorithm parameter.","required":false,"default":"UU","type":"string","values":["UU","Base64","Hex"]},
		{"name":"ivorsalt","description":"Specify this parameter to adjust ColdFusion encryption to match\n the details of other encryption software. If you specify this\n parameter, you must also specify the algorithm parameter.\n * For Block Encryption Algorithms: This is the binary\n Initialization Vector value to use with the algorithm. The\n algorithm must contain a Feedback Mode other than ECB. This\n must be a binary value that is exactly the same size as the\n algorithm block size.\n * For Password Based Encryption Algorithms: This is the binary\n Salt value to transform the password into a key.","required":false,"default":"","type":"binary","values":[]},
		{"name":"iterations","description":"The number of iterations to transform the password into a\n binary key. Specify this parameter to adjust ColdFusion\n encryption to match the details of other encryption software.\n If you specify this parameter, you must also specify the\n algorithm parameter with a Password Based Encryption (PBE)\n algorithm. Do not specify this parameter for Block Encryption\n Algorithms. You must use the same value to encrypt and\n decrypt the data.\n * For Password Based Encryption Algorithms: This is the\n binary Salt value to transform the password into a key.","required":false,"default":"","type":"numeric","values":[]}

	],
	"engines": {
		"coldfusion": {"minimum_version":"4", "notes":"", "docs":"https://helpx.adobe.com/coldfusion/cfml-reference/coldfusion-functions/functions-c-d/Decrypt.html"},
		"lucee": {"minimum_version":"", "notes":"", "docs":"http://docs.lucee.org/reference/functions/decrypt.html"},
		"railo": {"minimum_version":"", "notes":"", "docs":"http://railodocs.org/index.cfm/function/decrypt"},
		"openbd": {"minimum_version":"", "notes":"", "docs":"http://openbd.org/manual/?/function/decrypt"}
	},
	"links": [

	],
	"examples": [
		{
			"title":"Encrypt and Decrypt a Secret",
			"description":"Generate an AES 128 bit key and then use it to encrypt and decrypt a secret.",
			"code":"ex={};\nex.key = generateSecretKey(\"AES\");\nex.secret = \"top secret\";\nex.encrypted=encrypt(ex.secret, ex.key, \"AES\", \"Base64\");\nex.decrypted=decrypt(ex.encrypted, ex.key, \"AES\", \"Base64\");\nwriteDump(ex);",
			"result":""
		}
	]

}
