{
    "name":"runAsync",
    "type":"function",
    "syntax":"runAsync(function() {})",
    "returns":"any",
    "related":[],
    "description":"A function that returns a Future object, which is an eventual result of an asynchronous operation",
    "params":[
        {"name":"callback", "description":"Closure function that returns a result to be resolved.", "required":false, "default":"", "type":"function", "values":[], "callback_params":[]},
        {"name":"timeout", "description":"Timeout for the asynchronous process in milliseconds", "required":false, "default":1000, "type":"numeric", "values":[]}
    ],
    "engines":{
        "coldfusion":{"minimum_version":"2018", "notes":"", "docs":"https://helpx.adobe.com/coldfusion/cfml-reference/coldfusion-functions/functions-m-r/runasync.html"},
        "lucee": {"minimum_version": "5.3.0", "notes":"", "docs":""}
    },
    "links":[
        {
            "title":"Asynchronous programming",
            "description":"ColdFusion introduces asynchronous programming with Future object",
            "url":"https://helpx.adobe.com/coldfusion/using/asynchronous-programming.html"
        }
    ],
    "examples":[
        {
            "title":"Run a function asynchronously and get the result",
            "description":"",
            "code":"future = runAsync(function(){\n\treturn \"Hello World!\";\n});\nwriteOutput(future.get());",
            "result":"Hello World!",
            "runnable":true
        },
        {
            "title":"Run a function after the asynchronous function and use a five milliseconds timeout when calling get()",
            "description":"",
            "code":"future = runAsync(function(){\n\treturn 5;\n}).then(function(input){\n\treturn input + 2;\n});\nresult = future.get(3); // 3 is timeout(in ms)\nwriteOutput(result);",
            "result":5,
            "runnable":true
        },
        {
            "title":"Run a function asynchronously with then() and error()",
            "description":"",
            "code":"future = runAsync(function(){\n\treturn 5;\n}).then(function(input){\n\treturn input + 2;\n}).error(function(){\n\treturn \"Error occurred.\";\n});\nwriteOutput(future.get());",
            "result":7,
            "runnable":true
        }
    ]
}
