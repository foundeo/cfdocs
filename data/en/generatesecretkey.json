{
	"name":"generateSecretKey",
	"type":"function",
	"syntax":"generateSecretKey([algorithm] [,keysize])",
	"returns":"string",
	"related":["encrypt","decrypt"],
	"description":"Generates a secure random key value for use in the encrypt and decrypt functions.",
	"params": [
		{"name":"algorithm","description":"","required":false,"default":"","type":"string","values":["CFMX_COMPAT","AES","BLOWFISH","DES","DESEDE"]},
		{"name":"keysize","description":"Number of bits requested in the key for the specified algorithm (when allowed by JDK).","required":false,"default":"128","type":"numeric","values":["128", "192", "256", "512"]}

	],
	"engines": {
		"coldfusion": {"minimum_version":"7", "notes":"", "docs":"https://helpx.adobe.com/coldfusion/cfml-reference/coldfusion-functions/functions-e-g/generatesecretkey.html"},
		"lucee": {"minimum_version":"", "notes":"", "docs":"https://docs.lucee.org/reference/functions/generatesecretkey.html"},
		"railo": {"minimum_version":"", "notes":"", "docs":"http://railodocs.org/index.cfm/function/generatesecretkey"},
		"openbd": {"minimum_version":"", "notes":"", "docs":"http://openbd.org/manual/?/function/generatesecretkey"}
	},
	"links": [
		{
			"title":"Generating AES 256 bit Key",
			"description":"How to enable unlimited strength crypto in Java.",
			"url":"http://www.petefreitag.com/item/803.cfm"
		}
	],
	"examples": [
		{
			"title":"Generate an AES 128 bit Key",
			"description":"Generate an AES key and use it to encrypt and decrypt a secret.",
			"code":"ex={};\nex.key = generateSecretKey(\"AES\");\nex.secret = \"top secret\";\nex.encrypted=encrypt(ex.secret, ex.key, \"AES\", \"Base64\");\nex.decrypted=decrypt(ex.encrypted, ex.key, \"AES\", \"Base64\");\nwriteDump(ex);",
			"result":""
		}
	]

}
