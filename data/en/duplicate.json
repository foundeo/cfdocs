{
	"name":"duplicate",
	"type":"function",
	"syntax":"duplicate(variable)",
	"returns":"any",
	"related":["structCopy"],
	"description":" Returns a clone, also known as a deep copy, of a variable\n or XML object. There is no reference to the original variable.",
	"params": [
		{"name":"variable","description":"","required":true,"default":"","type":"any","values":[]}
	],
	"engines": {
		"coldfusion": {"minimum_version":"4.5", "notes":"", "docs":"https://helpx.adobe.com/coldfusion/cfml-reference/coldfusion-functions/functions-c-d/duplicate.html"},
		"lucee": {"minimum_version":"", "notes":"", "docs":"http://docs.lucee.org/reference/functions/duplicate.html"},
		"railo": {"minimum_version":"", "notes":"", "docs":"http://railodocs.org/index.cfm/function/duplicate"},
		"openbd": {"minimum_version":"", "notes":"", "docs":"http://openbd.org/manual/?/function/duplicate"}
	},
	"links": [],
	"examples": [{
		"title":"Changing a struct compared to changing its copy",
		"description":"`myNewStruct` holds a reference to `myStruct` so if you change `myNewStruct`, `myStruct` is changed accordingly as well, because they are the same struct just assigned to two variables.\nIn comparison `myOtherNewStruct` is a copy so if you change `myOtherNewStruct`, `myStruct` stays untouched because with the duplicate, a new, unique structure with the same key-value pairs is created thus they do not share the same reference",
		"code":"myStruct = {'foo': 'Lorem ipsum', 'bar': 'baz'};\n\nmyNewStruct = myStruct;\nmyOtherNewStruct = duplicate(myStruct);\n\nmyNewStruct.foo = 'ahmet sun';\nmyOtherNewStruct.foo = 'dolor sit';\n\nwriteOutput(myStruct.foo&' → '&myNewStruct.foo&' → '&myOtherNewStruct.foo);",
		"result":"ahmet sun → ahmet sun → dolor sit",
		"runnable":true
	}]
}
