 {
 	"name":"onMissingMethod",
 	"type":"function",
 	"syntax":"function onMissingMethod(string missingMethodName, struct missingMethodArguments) { }",
 	"returns":"void",
 	"related":[],
 	"description":"This method is invoked in a CFC when a method call exists that is not defined by cffunction or with a function statement.",
 	"params": [
 		{"name":"missingMethodName","description":"The name of the missing method.","required":true,"default":"","type":"string","values":[]},
        {"name":"missingMethodArguments","description":"The arguments that were passed on the function call to the missing method.","required":true,"default":"","type":"struct","values":[]}
 	],
 	"engines": {
 		"coldfusion": {"minimum_version":"8", "notes":"", "docs":"https://helpx.adobe.com/coldfusion/cfml-reference/coldfusion-tags/tags-c/cfcomponent.html"},
 		"lucee": {"minimum_version":"", "notes":"", "docs":""}
 	},
 	"links": [

 	],
 	"examples": [
 		{
			"title":"onMissingMethod Example",
			"description":"Creates helper function getPropertyNameForHTML() which calls getPropertyName() and wraps it with the encodeForHTML function.",
			"code":"public function onMissingMethod(missingMethodName, missingMethodArguments) {\r\n    if (reFindNoCase(\"^get[a-zA-Z0-9]+ForHTML$\", arguments.missingMethodName) {\r\n        local.getter = this[replaceNoCase(arguments.missingMethodName, \"ForHTML\", \"\")];\r\n        return encodeForHTML(local.getter());\r\n    } else {\r\n        throw (message=\"Method #encodeForHTML(arguments.missingMethodName)# was not found in the component #encodeForHTML(getMetadata(this).name)#\");\r\n    }\r\n}",
			"result":"",
			"runnable":false
		}

 	]

 }

