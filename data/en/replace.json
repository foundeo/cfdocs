{
	"name":"replace",
	"type":"function",
	"syntax":"replace(String, substring1, substring2 [, scope])",
	"returns":"String",
	"related":[],
	"description":"Replaces occurrences of substring1 in a string with substring2,\n in a specified scope. The search is case-sensitive. Function returns original string with replacements made.  New in ACF2016+ `replace()` now also accepts a callback function for the third parameter.",
	"params": [
		{"name":"String","description":"String to search","required":true,"default":"","type":"String","values":[]},
		{"name":"substring1","description":"Substring to find within string","required":true,"default":"","type":"String","values":[]},
		{"name":"substring2","description":"Substring to replace substring1 with","required":true,"default":"","type":"String","values":[]},
		{"name":"scope","description":"* one: replace the first occurrence\n * all: replace all occurrences","required":false,"default":"one","type":"String","values":["one","all"]}

	],
	"engines": {
		"coldfusion": {"minimum_version":"", "notes":"", "docs":"https://helpx.adobe.com/coldfusion/cfml-reference/coldfusion-functions/functions-m-r/replace.html"},
		"lucee": {"minimum_version":"", "notes":"", "docs":"http://docs.lucee.org/reference/functions/replace.html"},
		"railo": {"minimum_version":"", "notes":"", "docs":"http://railodocs.org/index.cfm/function/replace"},
		"openbd": {"minimum_version":"", "notes":"", "docs":"http://openbd.org/manual/?/function/replace"}
	},
	"links": [

	],
	"examples": [
		{
			"title": "Script Syntax",
			"description": "",
			"code": "getVal = replace(\"ColdFUsion\", \"U\", \"u\"); \r\n writeDump(getVal);",
			"result": "Expected Result: ColdFusion"
		},
		{
			"title": "Tag Syntax",
			"description": "",
			"code": "getVal1 = replace(\"COldFusiOn\", \"O\", \"o\", \"ONE\"); \r\n writeDump(getVal1);",
			"result": "Expected Result: ColdFusiOn"
		},
		{
			"title": "Callback Example",
			"description": "",
			"code": "input = \"Foobar,Foobar,Foobar\";\r\n    count = 0;\r\n    output = replace(input, 'Foobar', function() {\r\n        count++;\r\n        if (count == 1) return 'One';\r\n        if (count == 2) return 'Two';\r\n        return 'Three';\r\n    }, 'all');\r\n    \r\n    writedump(output);",
			"result": "Expected Result: One,Two,Three",
			"runnable": true
		}
	]

}
