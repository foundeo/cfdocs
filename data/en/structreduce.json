{
    "name":"structReduce",
    "type":"function",
    "syntax":"structReduce(struct, function(result, key, value [,struct]){} [, initialVal])",
    "script":"someStruct.reduce(function(result, key, value [,struct]){} [, initialVal])",
    "returns":"any",
    "related":["structEach","structSome","structMap","structFilter"],
    "description":"Iterates over every entry of the struct and calls the closure to work on the key value pair of the struct. This function will reduce the struct to a single value and will return the value.",
    "params":[
        {"name":"struct","description":"The input struct.","type":"struct","required":"true","values":[],"default":""},
		{"name":"callback","description":"Closure or a function reference that will be called for each of the iteration.",
			"callback_params": [
				{
					"values": [],
					"default": "",
					"description": "The result of the reduce operation after the previous iteration",
					"name": "result",
					"type": "any",
					"required": false
				},{
					"values": [],
					"default": "",
					"description": "The key for the current iteration",
					"name": "key",
					"type": "string",
					"required": false
				},{
					"values": [],
					"default": "",
					"description": "The value for the current iteration",
					"name": "value",
					"type": "any",
					"required": false
				},{
					"values": [],
					"default": "",
					"description": "A reference of the original struct",
					"name": "struct",
					"type": "struct",
					"required": false
				}],"type":"any","required":"true","values":[],"default":""},
        {"name":"initialVal","description":"Initial value which will be used for the reduce operation.","type":"any","required":"0","values":[],"default":""}
    ],
    "engines":{
        "coldfusion":{"minimum_version":"11","docs":"https://helpx.adobe.com/coldfusion/cfml-reference/coldfusion-functions/functions-s/structreduce.html","notes":""},
        "lucee": {"minimum_version":"", "notes":"", "docs":"https://docs.lucee.org/reference/functions/structreduce.html"}
    },
    "links":[{
        "title":"Map, Reduce and other Higher Order Functions",
        "description":"A Primer for map, reduce, filter, and Higher Order Functions in general.",
        "url":"http://ryanguill.com/functional/higher-order-functions/2016/05/18/higher-order-functions.html"
    },
    {
        "title": "ColdFusion 11: .map() and .reduce()",
        "description": "A look at the new .map() and .reduce() methods that each of array, struct and lists all have",
        "url":"http://blog.adamcameron.me/2014/02/coldfusion-11-map-and-reduce.html"
    }],
    "examples":[
        {
            "title": "Script Syntax",
            "description": "",
            "code": "rainbow = { \"Red\"=\"Whero\",  \"Orange\"=\"Karaka\", \"Yellow\"=\"Kowhai\",  \"Green\"=\"Kakariki\" }; \r\n  ui = structReduce(  rainbow, function(previousValue, key, value) \r\n   { \r\n return previousValue & \"<dt>#key#</dt><dd>#value#</dd>\"; \r\n  }, \r\n \"<dl>\" \r\n ) & \"</dl>\"; \r\n writeDump(rainbow); \r\n writeOutput(ui); \r\n"
        },
        {
            "title": "Using Member Function",
            "description": "CF11+ Lucee4.5+ ",
            "code": "rainbow = { \"Red\"=\"Whero\",  \"Orange\"=\"Karaka\", \"Yellow\"=\"Kowhai\",  \"Green\"=\"Kakariki\" }; \r\n  ui = rainbow.reduce( function(previousValue, key, value) \r\n   { \r\n return previousValue & \"<dt>#key#</dt><dd>#value#</dd>\"; \r\n  }, \r\n \"<dl>\" \r\n ) & \"</dl>\"; \r\n writeDump(rainbow); \r\n writeOutput(ui); \r\n"
        }
    ]
}
